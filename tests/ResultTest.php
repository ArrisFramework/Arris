<?php

use PHPUnit\Framework\TestCase;
use Arris\Entity\Result;

class ResultTest extends TestCase
{
    public static function setUpBeforeClass()
    {
        parent::setUpBeforeClass(); // TODO: Change the autogenerated stub
    }

    /**
     * @return void
     * @testdox Test Result with one arg for data
     */
    public function testOneArgForData()
    {
        $r = new Result(['a' => 'b']);

        $this->assertEquals('b', $r->a);
    }

    /**
     * @return void
     * @testdox Test Result with one arg for boolean values
     */
    public function testOneArgForBooleans()
    {
        $r = new Result(['a' => 'b']);

        $this->assertTrue($r->is_success);
        $this->assertFalse($r->is_error);
    }
    /**
     * @return void
     * @testdox Test Result with one arg for message value
     */
    public function TestOneArg()
    {
        $r = new Result(['a' => 'b']);

        $this->assertEquals('', $r->message);
    }

    /**
     * @return void
     * @testdox Test Result with two args (string, array)
     */
    public function testTwoArgsStringAndArray()
    {
        $r = new Result('message', ['a' => 'b']);

        $this->assertEquals('b', $r->a);
        $this->assertEquals('message', $r->message);
    }

    /**
     * @return void
     * @testdox Test Result with two args (bool, array)
     */
    public function testTwoArgsBoolAndArray()
    {
        $r = new Result(false, ['a' => 'b']);

        $this->assertFalse($r->is_success);
        $this->assertTrue($r->is_error);
        $this->assertEquals('', $r->message);
        $this->assertEquals('b', $r->a);
    }

    /**
     * @return void
     * @testdox Test Result with two args (bool, string)
     */
    public function testTwoArgsBoolAndString()
    {
        $r = new Result(false, 'message');

        $this->assertFalse($r->is_success);
        $this->assertEquals('message', $r->message);
    }

    /**
     * @return void
     * @testdox Test Result with 3 args (bool, string, array)
     */
    public function testThreeArgs()
    {
        $r = new Result(false, 'message', [ 'a' => 'b' ]);

        $this->assertFalse($r->is_success);
        $this->assertEquals('message', $r->message);
        $this->assertEquals('b', $r->a);
    }

}